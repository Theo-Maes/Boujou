// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DriverPassenger {
  driverId  Int
  userId    Int
  joinedAt  DateTime @default(now())

  driver    Driver   @relation(fields: [driverId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([driverId, userId])
  @@index([driverId], name: "idx_driver_passenger_driverId")
  @@index([userId], name: "idx_driver_passenger_userId")
}

model Driver {
  id           Int      @id @default(autoincrement())
  quantity     Int
  city         String
  adress       String
  description  String
  zipcode      String
  startingdate DateTime
  endingdate   DateTime
  longitude    String
  latitude     String
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  passengers   DriverPassenger[]
  groups       Group[]
}

model Group {
  id       Int       @id @default(autoincrement())
  name     String
  userId   Int
  eventId  Int
  creator  User      @relation("createdGroups", fields: [userId], references: [id])
  event    Event     @relation(fields: [eventId], references: [id])
  driver   Driver   @relation(fields: [driverId], references: [id])
  driverId Int
  members  UserGroup[]
}

model UserGroup {
  userId  Int
  groupId Int
  joinedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  group  Group  @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
  @@index([userId], name: "idx_user_group_userId")
  @@index([groupId], name: "idx_user_group_groupId")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String  
  isAdmin   Boolean  @default(false)
  email     String   @unique
  password  String
  avatar    String   
  firstName String   
  lastName  String
  adress    String
  latitude  String
  longitude String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  groups    UserGroup[]
  createdGroups Group[] @relation("createdGroups")
  drivers       Driver[]
  passengerIn   DriverPassenger[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  users User[]
}

model Category {
    id Int @id @default(autoincrement())
    name String
    events Event[]
}

model Event {
    id          Int       @id @default(autoincrement())
    name        String    @db.VarChar(100)
    startingDate DateTime
    endingDate  DateTime
    latitude    String    @db.VarChar(50)
    longitude   String    @db.VarChar(100)
    image       String    @db.VarChar(100)
    city        String    @db.VarChar(100)
    address     String    @db.VarChar(100)
    validatedAt DateTime?
    cancelledAt DateTime?
    description String
    zipCode     String    @db.VarChar(100)
    category    Category @relation(fields: [categoryId], references: [id])
    categoryId  Int
    groups  Group[]
}